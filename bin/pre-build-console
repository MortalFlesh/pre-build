#!/usr/bin/env php
<?php

namespace MF\PreBuild;

use GitWrapper\GitWrapper;
use MF\Collection\Mutable\Generic\ListCollection;
use MF\PreBuild\Command\AbstractCommand;
use MF\PreBuild\Command\ParseVariablesCommand;
use MF\PreBuild\Facade\ParseVariablesFacade;
use MF\PreBuild\Git\GitCommandFactory;
use MF\PreBuild\Service\ConfigReader;
use MF\PreBuild\Service\GitParser;
use MF\PreBuild\Service\GitProcess;
use MF\PreBuild\Service\Md5Sum;
use MF\PreBuild\Service\VariablesExporter;
use Symfony\Component\Console\Application;

function requireIfExists(string $file): bool
{
    if (file_exists($file)) {
        require_once $file;
        return true;
    }

    return false;
}

$rootForLocalDir = __DIR__ . '/../';
$rootAsDependency = __DIR__ . '/../../../../';

$repositoryPath = null;

if (requireIfExists($rootForLocalDir . 'vendor/autoload.php')) {
    $repositoryPath = $rootForLocalDir;
} elseif (requireIfExists($rootAsDependency . 'vendor/autoload.php')) {
    $repositoryPath = $rootAsDependency;
} else {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

date_default_timezone_set('Europe/Prague');
$composer = json_decode(file_get_contents(__DIR__ . '/../composer.json'), true);

// services definition

$gitProcess = new GitProcess($repositoryPath);
$configReader = new ConfigReader();
$gitCommandFactory = new GitCommandFactory();
$gitParser = new GitParser($gitProcess, $gitCommandFactory);
$variablesExporter = new VariablesExporter();
$md5sum = new Md5Sum();

// Subscribers

// Commands
/** @phpstan-var ListCollection<AbstractCommand> $commands */
$commands = new ListCollection();
$commands->add(
    new ParseVariablesCommand(
        $composer,
        new ParseVariablesFacade($configReader, $gitParser, $variablesExporter, $md5sum)
    )
);

// Prepare services

// app definition
$application = new Application('pre-build-console', $composer['version']);
$application->addCommands($commands->toArray());
$application->run();

exit;
